pragma solidity ^0.5.12;
 
contract Crowdsale {
   using SafeMath for uint256; 
   //utilisation de safemath permet d'Ã©chapper a certains problemes (dont le overflow)
 
   address public owner; // the owner of the contract
   address public escrow; // wallet to collect raised ETH
   uint256 public savedBalance = 0; // Total amount raised in ETH
   mapping (address => uint256) public balances; // Balances in incoming Ether
 
   // Initialization
   function Crowdsale(address _escrow) public{
       //ne pas utiliser tx.origin mais msg.sender 
       owner = msg.sender;
       // add address of the specific contract
       escrow = _escrow;
   }
  
   // function to receive ETH
   receive()   payable external{
       balances[msg.sender] = balances[msg.sender].add(msg.value);
       savedBalance = savedBalance.add(msg.value);
       escrow.transfert(msg.value);
       // utiliser transfert plutot que send avec fonction fallback. 
   }
  
   // refund investisor 
   // fonction push over pull necessaire au moins plusieurs require pour specifier que la balance n'est pas a 0 ce qui peut eviter la sur conso de gas. 
   //  
   
   function withdrawPayments() public{
       address payee = msg.sender;
       uint256 payment = balances[payee];
       require(payment !=0);
       require(address(this).balance >= payment); 
       payee.send(payment);
 
       savedBalance = savedBalance.sub(payment);
       balances[payee] = 0;
   }
}
